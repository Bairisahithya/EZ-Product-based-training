29-09-23
---------
Bitwise operators orders:-
&(AND)----->2
|(OR)----->4
~(TILL)----->1
^(XOR)----->3(if in the binary no. we have 1 then it is denoted by 1)
2types:-
1)inclusive 
2)exclusive


1)10&4~2 invalid because its wont accept 2digits
2)6|3&9+6 valid
3)2~4^3*2 invalid
4)~9+4&6 valid because negation accepts 1 digit.

~n=-(n+1)
eg:-~9=-(9+1)=-10
----------------------------------------------------------------------------------------------------------------------------------------------
*    after creating a array find out the smallest missing positive integer?
___________________________________________________________

def segregate_positive(nums):
    n = len(nums)
    for i in range(n):
        while 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]:
            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]
def find_missing_positive(nums):
    n = len(nums)
    segregate_positive(nums)
    for i in range(n):
        if nums[i] != i + 1:
            return i + 1
    return n + 1
arr = [1, 2,3,4, -5,]
result = find_missing_positive(arr)
print("Smallest missing positive integer is:", result)
------------------------------------------------------------------------------------------------------------------------
*   swap numbers:
____________
a = 100
b = 200
a = a ^ b
b = a ^ b
a = a ^ b
print("a:", a)
print("b:", b)
----------------------------------------------------------------------------------------------------------------------------------------------
*   for given number "n" check kth width is set or not?
_______________________________________
def is_kth_bit_set(n, k):
    mask = 1 << k
    return (n & mask) != 0
n = 25  
k = 3   
if is_kth_bit_set(n, k):
    print(f"The {k}th bit is set in {n}.")
else:
    print(f"The {k}th bit is not set in {n}.")
-----------------------------------------------------------------------------------------------------------------------------------------------------
*  given n print the xor of all numbers 
_________________________________
def xor_of_numbers(n):
    result = 0
    for i in range(1, n + 1):
        result ^= i
    return result
n = 5
result = xor_of_numbers(n)
print("XOR of all numbers from 1 to", n, "is:", result)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
find out xor for all the given number for the range?
_________________________________________
i = 1
r = 9
result = 0
for num in range(i, r + 1):
    result ^= num
print("XOR of numbers from", i, "to", r, "is:", result)
______________________________________________________________________________________________________________________________________________________
